#!/bin/bash

datadir="data"
testdir="tests"
commandlist=""
while test $# -gt 0
do
    case "$1" in
        -scripts)
            datadir="script_data"
            testdir="script_tests"
            ;;
        *)
            commandlist="$commandlist $1"
            ;;
    esac
    shift
done

LOGFILE=testing.log
echo logging to \""$LOGFILE"\"

cat > $LOGFILE <<EOD
-------------------------------------------
  Testing MRtrix3 installation
-------------------------------------------

EOD

echo -n "fetching test data... "
git submodule update --init testing/$datadir >> $LOGFILE 2>&1

if [ $? != 0 ]; then
  echo ERROR!
  exit 1
else
  echo OK
fi



echo -n "building testing commands... "
cat >> $LOGFILE <<EOD

-------------------------------------------

## building test commands...

EOD
(
  cd testing
  if [ -z "$PYTHON" ]; then
    ../build
  else
    $PYTHON ../build
  fi
) >> $LOGFILE 2>&1
if [ $? != 0 ]; then
  echo ERROR!
  exit 1
else
  echo OK
fi


# generate list of tests to run if none have been requested explicitly
if [ -z "$commandlist" ]; then
  for n in testing/$testdir/*; do
    commandlist="$commandlist $(basename $n)"
  done
fi

a_test_has_failed=false

cat >> $LOGFILE <<EOD

PATH is set to $PATH
EOD


for command in $commandlist; do

  cat >> $LOGFILE <<EOD
-------------------------------------------

## running "${command}"...

EOD

  echo -n 'running "'${command}'"... '
  rm -rf testing/$datadir/tmp* testing/$datadir/*-tmp-*
  ((ntests=0))
  ((success=0))
  while IFS='' read -r cmd || [[ -n "$cmd" ]]; do
    cmd="${cmd%\#*}"
    [[ -n "$cmd" ]] || continue
    echo -n '# command: '$cmd >> $LOGFILE
    (
      export PATH="$(pwd)/testing/bin:$(pwd)/bin:$PATH";
      cd testing/$datadir/
      eval $cmd
    ) > .__tmp.log 2>&1

    if [[ $? -ne 0 ]]; then
      echo " [ ERROR ]" >> $LOGFILE
    else
      echo " [ ok ]" >> $LOGFILE
      ((success++));
    fi
    cat .__tmp.log >> $LOGFILE
    echo "" >> $LOGFILE
    ((ntests++))
  done < testing/$testdir/$command

  echo -n $success of $ntests passed
  if [[ $success -lt $ntests ]]; then
    echo "    <-------- ERROR"
    a_test_has_failed=true
    cat >> $LOGFILE <<EOD

## ERROR: $(($ntests-$success)) tests failed for "${command}"

EOD
  else
    echo ""
    cat >> $LOGFILE <<EOD
## $ntests tests completed OK for "${command}"

EOD
  fi

done

if [ ${a_test_has_failed} = true ];
then
  exit 1
fi


