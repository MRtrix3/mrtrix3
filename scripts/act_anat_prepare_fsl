#!/usr/bin/env python

# Script that receives as argument a T1-weighted image, and outputs a five-tissue-type (5TT) segmented image
#   in a format appropriate for ACT
# In this script, all major stages of processing are performed using FSL tools:
# BET for brain extraction, FAST for tissue segmentation, FIRST for sub-cortical grey matter segmentation


import os, sys
import lib.app

from lib.binaryInPath import binaryInPath
from lib.errorMessage import errorMessage
from lib.getFSLSuffix import getFSLSuffix
from lib.printMessage import printMessage
from lib.runCommand   import runCommand
from lib.warnMessage  import warnMessage

lib.app.author = 'Robert E. Smith (robert.smith@florey.edu.au)'
lib.app.initCitations([ 'ACT', 'bet', 'fast', 'first', 'FSL' ])
lib.app.initParser('Generate a 5TT image suitable for ACT from a T1 image using FSL tools')
lib.app.parser.add_argument('input',  help='The input T1 image')
lib.app.parser.add_argument('output', help='The output 5TT image')
lib.app.initialise()

fsl_path = os.environ.get('FSLDIR', '')
if not fsl_path:
  errorMessage('Environment variable FSLDIR is not set; please run appropriate FSL configuration script')

ssroi_cmd = 'standard_space_roi'
if not binaryInPath(ssroi_cmd):
  ssroi_cmd = 'fsl5.0-standard_space_roi'
  if not binaryInPath(ssroi_cmd):
    errorMessage('Could not find FSL program standard_space_roi; please verify FSL install')

bet_cmd = 'bet'
if not binaryInPath(bet_cmd):
  bet_cmd = 'fsl5.0-bet'
  if not binaryInPath(bet_cmd):
    errorMessage('Could not find FSL program bet; please verify FSL install')

fast_cmd = 'fast'
if not binaryInPath(fast_cmd):
  fast_cmd = 'fsl5.0-fast'
  if not binaryInPath(fast_cmd):
    errorMessage('Could not find FSL program fast; please verify FSL install')

first_cmd = 'run_first_all'
if not binaryInPath(first_cmd):
  first_cmd = "fsl5.0-run_first_all"
  if not binaryInPath(first_cmd):
    errorMessage('Could not find FSL program run_first_all; please verify FSL install')

first_atlas_path = os.path.join(fsl_path, 'data', 'first', 'models_336_bin')

if not os.path.isdir(first_atlas_path):
  errorMessage('Atlases required for FSL\'s FIRST program not installed;\nPlease install fsl-first-data using your relevant package manager')

fsl_suffix = getFSLSuffix()

sgm_structures = [ 'L_Accu', 'R_Accu', 'L_Caud', 'R_Caud', 'L_Pall', 'R_Pall', 'L_Puta', 'R_Puta', 'L_Thal', 'R_Thal' ]

runCommand('mrconvert ' + lib.app.args.input + ' ' + os.path.join(lib.app.tempDir, 'T1.nii') + ' -stride +1,+2,+3')

lib.app.gotoTempDir()


# Use FSL command standard_space_roi to do an initial masking of the image before BET
# Also reduce the FoV of the image
# Using MNI 1mm dilated brain mask rather than the -b option in standard_space_roi (which uses the 2mm mask); the latter looks 'buggy' to me... Unfortunately even with the 1mm 'dilated' mask, it can still cut into some brain areas, hence the explicit dilation
mni_mask_path = os.path.join(fsl_path, 'data', 'standard', 'MNI152_T1_1mm_brain_mask_dil.nii.gz')
mni_mask_dilation = 0;
if os.path.exists (mni_mask_path):
  mni_mask_dilation = 4;
else:
  mni_mask_path = os.path.join(fsl_path, 'data', 'standard', 'MNI152_T1_2mm_brain_mask_dil.nii.gz')
  if os.path.exists (mni_mask_path):
    mni_mask_dilation = 2;

# standard_space_roi can sometimes crash; if this happens, try to allow the script to continue
if mni_mask_dilation:
  runCommand('maskfilter ' + mni_mask_path + ' dilate mni_mask.nii -npass ' + str(mni_mask_dilation))
  runCommand(ssroi_cmd + ' T1.nii T1_preBET' + fsl_suffix + ' -maskMASK mni_mask.nii -roiFOV', False)
else:
  runCommand(ssroi_cmd + ' T1.nii T1_preBET' + fsl_suffix + ' -b', False)

if not os.path.isfile('T1_preBET' + fsl_suffix):
  warnMessage('FSL command ' + ssroi_cmd + ' appears to have failed; passing T1 directly to BET')
  runCommand('mrconvert T1.nii T1_preBET' + fsl_suffix)

# BET
runCommand(bet_cmd + ' T1_preBET' + fsl_suffix + ' T1_bet' + fsl_suffix + ' -f 0.15 -R')

# FAST
runCommand(fast_cmd + ' T1_bet' + fsl_suffix)

# FIRST
runCommand(first_cmd + ' -s ' + ','.join(sgm_structures) + ' -i T1.nii -o first')

# Convert FIRST meshes to partial volume images
pve_image_list = [ ]
for struct in sgm_structures:
  pve_image_path = 'mesh2pve_' + struct + '.nii'
  vtk_in_path = 'first-' + struct + '_first.vtk'
  vtk_temp_path = struct + '.vtk'
  if not os.path.exists(vtk_in_path):
    errorMessage('Missing .vtk file for structure ' + struct + '; run_first_all must have failed')
  runCommand('meshconvert ' + vtk_in_path + ' ' + vtk_temp_path + ' -transform_first2real T1.nii')
  runCommand('mesh2pve ' + vtk_temp_path + ' T1_preBET' + fsl_suffix + ' ' + pve_image_path)
  pve_image_list.append(pve_image_path)
pve_cat = ' '.join(pve_image_list)
runCommand('mrmath ' + pve_cat + ' sum - | mrcalc - 1.0 -min all_sgms.nii')

# Combine all tissue types using the 5ttgen command
# Looks like FAST in 5.0 ignores FSLOUTPUTTYPE when writing the PVE images
# Will have to wait and see whether this changes, and update the script accordingly
if fast_cmd == 'fast':
  fast_suffix = fsl_suffix
else:
  fast_suffix = '.nii.gz'
runCommand('5ttgen T1_bet_pve_0' + fast_suffix + ' T1_bet_pve_1' + fast_suffix + ' T1_bet_pve_2' + fast_suffix + ' all_sgms.nii combined_precrop.mif')

# Use mrcrop to reduce file size (improves caching of image data during tracking)
root,ext = os.path.splitext(lib.app.args.output)
if ext.lower() == '.gz':
  ext = os.path.splitext(root)[1] + ext
result_path = 'result' + ext
runCommand('mrmath combined_precrop.mif sum - -axis 3 | mrthreshold - - -abs 0.5 | mrcrop combined_precrop.mif ' + result_path + ' -mask -')

lib.app.moveFileToDest(result_path, lib.app.args.output)

lib.app.complete()

