#!/usr/bin/env python

# Script for estimating response functions for spherical deconvolution
# A number of different approaches are available within this script for performing response function estimation.


import argparse, math, os, shutil, sys
import lib.app

from lib.errorMessage  import errorMessage
from lib.getHeaderInfo import getHeaderInfo
from lib.getImageStat  import getImageStat
from lib.printMessage  import printMessage
from lib.runCommand    import runCommand
from lib.warnMessage   import warnMessage


lib.app.author = 'Robert E. Smith (robert.smith@florey.edu.au)'
lib.app.initCitations([ 'MSMT_CSD', 'SD', 'Tax2014', 'Tournier2013' ])
lib.app.initParser('Estimate response function(s) for spherical deconvolution')


base_parser = lib.app.Parser(description='Arguments & options common to all algorithms', add_help=False, formatter_class=argparse.RawDescriptionHelpFormatter)

# Standard input/output arguments
base_argument = base_parser.add_argument_group('Positional argument common to all algorithms')
base_argument.add_argument('input',  help='The input DWI')

# General options
base_options = base_parser.add_argument_group('Options common to all algorithms')
base_options.add_argument('-shell', help='The b-value shell(s) to use in response function estimation (single value for single-shell response, comma-separated list for multi-shell response)')
base_options.add_argument('-lmax', help='The maximum harmonic degree(s) of response function estimation (single value for single-shell response, comma-separated list for multi-shell response)')
base_options.add_argument('-mask', help='Provide an initial mask for response voxel selection')
base_options.add_argument('-voxels', help='Output an image showing the final voxel selection(s)')
grad_import_group = base_options.add_mutually_exclusive_group()
grad_import_group.add_argument('-grad', help='Pass the diffusion gradient table in MRtrix format')
grad_import_group.add_argument('-fslgrad', nargs=2, metavar=('bvecs', 'bvals'), help='Pass the diffusion gradient table in FSL bvecs/bvals format')


# Groups for individual algorithms
subparsers = lib.app.parser.add_subparsers(title='algorithm choices', description='Select the algorithm to be used to derive the response function', help='Additional help available for individual algorithms: Use e.g. ' + os.path.basename(sys.argv[0]) + ' fa -help')
#subparsers.required = True


# Import the command-line settings for all algorithms found in the scripts/src/dwi2response/ directory
from src import dwi2response
algorithm_list = os.listdir(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), 'src', 'dwi2response'))
for filename in algorithm_list:
  filename = filename.split('.')
  if len(filename) == 2 and filename[1] == 'py' and not filename[0] == '__init__':
    __import__('src.dwi2response', globals(), locals(), [ filename[0] ])
    algorithm = getattr(dwi2response, filename[0])
    algorithm.initParser(subparsers, base_parser)


lib.app.initialise()


# Find out which algorithm the user has requested
algorithm = getattr(dwi2response, lib.app.args.algorithm)


# Check for prior existence of output files, and grab any input files, used by the particular algorithm
lib.app.checkOutputFile(lib.app.args.voxels)
algorithm.checkOutputFiles()
algorithm.getInputFiles()


# Sanitise some inputs, and get ready for data import
if lib.app.args.lmax:
  try:
    lmax = [ int(x) for x in lib.app.args.lmax.split(',') ]
    if any([lmax_value%2 for lmax_value in lmax]):
      errorMessage('Value of lmax must be even')
  except:
    errorMessage('Parameter lmax must be a number')
  if lib.app.args.single_shell and not len(lmax) == 1:
    errorMessage('Can only specify a single lmax value for single-shell algorithms')
shell_option = ''
if lib.app.args.shell:
  try:
    shell_values = [ int(x) for x in lib.app.args.shell.split(',') ]
  except:
    errorMessage('-shell option should provide a comma-separated list of b-values')
  if lib.app.args.single_shell and not len(lmax) == 1:
    errorMessage('Can only specify a single b-value shell for single-shell algorithms')
  shell_option = ' -shell ' + lib.app.args.shell

grad_import_option = ''
if lib.app.args.grad:
  grad_import_option = ' -grad ' + lib.app.args.grad
elif lib.app.args.fslgrad:
  grad_import_option = ' -fslgrad ' + lib.app.args.fslgrad[0] + ' ' + lib.app.args.fslgrad[1]


# Get standard input data into the temporary directory
if lib.app.args.single_shell or shell_option:
  runCommand('mrconvert ' + lib.app.args.input + ' - -stride 0,0,0,1' + grad_import_option + ' | dwiextract - ' + os.path.join(lib.app.tempDir, 'dwi.mif') + shell_option)
else: # Don't want to discard b=0 in multi-shell algorithms, which dwiextract will do
  runCommand('mrconvert ' + lib.app.args.input + ' ' + os.path.join(lib.app.tempDir, 'dwi.mif') + ' -stride 0,0,0,1' + grad_import_option)
if lib.app.args.mask:
  runCommand('mrconvert ' + lib.app.args.mask + ' ' + os.path.join(lib.app.tempDir, 'mask.mif') + ' -datatype bit')


lib.app.gotoTempDir()


# Make sure it's actually a DWI that's been passed
size = getHeaderInfo('dwi.mif', 'size').split()
if len(size) != 4:
  errorMessage('Input image must be a 4D image')
DW_scheme = getHeaderInfo('dwi.mif', 'dwgrad').split('\n')
if len(DW_scheme) != int(size[3]):
  errorMessage('Input image does not contain valid DW gradient scheme')
  

# Generate a brain mask (if necessary)
# Otherwise, check that the mask provided is appropriate
if os.path.exists('mask.mif'):
  dwi_size = [ int(x) for x in getHeaderInfo('dwi.mif', 'size').split() ]
  mask_size = [ int(x) for x in getHeaderInfo('mask.mif', 'size').split() ]
  if not mask_size[:3] == dwi_size[:3]:
    errorMessage('Dimensions of provided mask image do not match DWI')
else:
  runCommand('dwi2mask dwi.mif mask.mif')


# From here, the script splits depending on what estimation algorithm is being used
algorithm.execute()


# Finalize for all algorithms
if lib.app.args.voxels:
  runCommand('mrconvert voxels.mif "' + os.path.join(lib.app.workingDir, lib.app.args.voxels) + '"' + lib.app.mrtrixForce)
lib.app.complete()

