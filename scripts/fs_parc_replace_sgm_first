#!/usr/bin/env python

# Script for 'repairing' a FreeSurfer parcellation image
# FreeSurfer's sub-cortical structure segmentation has been observed to be highly variable
#   under scan-rescan conditions. This introduces unwanted variability into the connectome,
#   as the parcellations don't overlap with the sub-cortical segmentations provided by
#   FIRST for the sake of Anatomically-Constrained Tractography. This script determines the
#   node indices that correspond to these structures, and replaces them with estimates
#   derived from FIRST.
# This script can be used in one of two ways. Firstly, it can directly change the nodes in
#   one of FreeSurfer's segmentation outputs, by providing the file FreeSurferColorLUT.txt
#   as the lookup table file. If such a segmentation has already been processed using
#   labelconfig, then provide the connectome config file used. These are necessary to
#   determine which integer values correspond to the sub-cortical grey matter structres
#   that are being re-defined.


import os, sys
import lib.app

from lib.binaryInPath import binaryInPath
from lib.errorMessage import errorMessage
from lib.isWindows    import isWindows
from lib.printMessage import printMessage
from lib.runCommand   import runCommand

lib.app.initCitations([ 'first', 'FSL', 'SIFT_followup' ])
lib.app.initParser('In a FreeSurfer parcellation image, replace the sub-cortical grey matter structure delineations using FSL FIRST')
lib.app.parser.add_argument('parc',   help='The input FreeSurfer parcellation image')
lib.app.parser.add_argument('t1',     help='The T1 image to be provided to FIRST')
lib.app.parser.add_argument('config', help='Either the FreeSurfer lookup table (if the input parcellation image is directly from FreeSurfer), or the connectome configuration file (if the parcellation image has been modified using the labelconfig command)')
lib.app.parser.add_argument('output', help='The output parcellation image')
lib.app.initialise()

if isWindows():
  errorMessage('Script cannot run on Windows due to FSL dependency')

fsl_path = os.environ.get('FSLDIR', '')
if not fsl_path:
  errorMessage('Environment variable FSLDIR is not set; please run appropriate FSL configuration script')

first_cmd = 'run_first_all'
if not binaryInPath(first_cmd):
  first_cmd = "fsl5.0-run_first_all"
  if not binaryInPath(first_cmd):
    errorMessage('Could not find FSL program run_first_all; please verify FSL install')

first_atlas_path = os.path.join(fsl_path, 'data', 'first', 'models_336_bin')

if not os.path.isdir(first_atlas_path):
  errorMessage('Atlases required for FSL\'s FIRST program not installed;\nPlease install fsl-first-data using your relevant package manager')

# Want a mapping between FreeSurfer node names and FIRST structure names
# Just deal with the 5 that are used in ACT; FreeSurfer's hippocampus / amygdala segmentations look good enough.
structure_map = { 'L_Accu':'Left-Accumbens-area',  'R_Accu':'Right-Accumbens-area', 
                  'L_Caud':'Left-Caudate',         'R_Caud':'Right-Caudate',
                  'L_Pall':'Left-Pallidum',        'R_Pall':'Right-Pallidum',
                  'L_Puta':'Left-Putamen',         'R_Puta':'Right-Putamen',
                  'L_Thal':'Left-Thalamus-Proper', 'R_Thal':'Right-Thalamus-Proper' }
                  
# Import the config file
# Invert the mapping - go from the structure name to the index
config = {}
with open(lib.app.args.config) as f:
  for line in f:
    line = line.rstrip()
    if line and line[0]!='#':
       line = line.split()
       config[line[1]] = line[0] # This can remain as a string

# Get the parcellation and T1 images into the temporary directory, with conversion of the T1 into the correct format for FSL
runCommand('mrconvert ' + lib.app.args.parc + ' ' + os.path.join(lib.app.tempDir, 'parc.mif'))
runCommand('mrconvert ' + lib.app.args.t1   + ' ' + os.path.join(lib.app.tempDir, 'T1.nii')   + ' -stride +1,+2,+3')

lib.app.gotoTempDir()

# Run FIRST
runCommand(first_cmd + ' -s ' + ','.join(structure_map.keys()) + ' -i T1.nii -o first')

# Convert FIRST meshes to node masks
# In this use case, don't want the PVE images; want to threshold at 0.5
mask_list = [ ]
for struct in structure_map.keys():
  image_path = struct + '_mask.nii'
  mask_list.append (image_path)
  vtk_in_path = 'first-' + struct + '_first.vtk'
  if not os.path.exists(vtk_in_path):
    errorMessage('Missing .vtk file for structure ' + struct + '; run_first_all must have failed')
  runCommand('meshconvert ' + vtk_in_path + ' transformed.vtk -transform_first2real T1.nii')
  runCommand('mesh2pve transformed.vtk parc.mif - | mrthreshold - ' + image_path + ' -abs 0.5')
  # Replace the node location in the parcellation image with the new mask image
  node_index = config[structure_map[struct]]
  runCommand('mrcalc parc.mif ' + node_index + ' -neq parc.mif -mult parc_old_removed.mif')
  # Can't add images here - may have overlap with existing nodes
  # Instead, set to the desired node index value if the mask is true, or use the existing value in the image otherwise
  runCommand('mrcalc ' + image_path + ' ' + node_index + ' parc_old_removed.mif -if parc_new_inserted.mif')
  os.remove('transformed.vtk')
  os.remove('parc.mif')
  os.remove('parc_old_removed.mif')
  os.rename('parc_new_inserted.mif', 'parc.mif')

# Detect any overlapping voxels between these masks
# These will be set to 0 in the final parcellated image
result_path = 'result' + os.path.splitext(lib.app.args.output)[1]
runCommand('mrmath ' + ' '.join(mask_list) + ' sum - | mrcalc - 1 -gt overlap_mask.nii')
runCommand('mrcalc overlap_mask.nii 0 parc.mif -if ' + result_path)

lib.app.moveFileToDest(result_path, lib.app.args.output)

lib.app.complete()

