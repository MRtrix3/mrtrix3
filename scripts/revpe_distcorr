#!/usr/bin/env python

# Script for performing EPI distortion correction using FSL 5.0 tools eddy / topup / applytopup

# This script is only for the specific case where a single pair of reversed-phase-encode images have been acquired for estimating the inhomogeneity field, which is to be used subsequently to correct a volume series (DWI / fMRI) that has been acquired using a fixed phase-encode direction.

# Unlike the previous version of this script, this now uses FSL's eddy tool to perform motion & eddy current correction as well as susceptibility distortion correction for DWI. Therefore the input images to this script should be the images as they are received from the scanner i.e. it is no longer necessary to perform DWI motion correction before running this script. However, if it is an fMRI time series that is being processed, eddy is not applicable, so motion correction will need to be applied prior to this script, and this script is only responsible for the susceptibility distortion correction. (Perhaps down the track FMRIB will modify mcflirt to use the field output from topup...?)

# Order of input arguments is:
# * Phase encode direction: This can be an axis number (0-2), or one of the following: lr, rl, ap, pa, is, si
# * First image from reverse phase-encode pair
# * Second image from reverse phase-encode pair
# * Image series to be corrected; note that this must have the same phase-encode direction as the FIRST image of the reversed phase-encode pair
# * Name of output corrected image series


import os, sys
import lib.app

from lib.binaryInPath  import binaryInPath
from lib.errorMessage  import errorMessage
from lib.getFSLSuffix  import getFSLSuffix
from lib.getHeaderInfo import getHeaderInfo
from lib.getPEAxis     import getPEAxis
from lib.isWindows     import isWindows
from lib.printMessage  import printMessage
from lib.runCommand    import runCommand
from lib.warnMessage   import warnMessage

lib.app.initCitations([ 'eddy/topup', 'FSL' ])
lib.app.initParser('Perform EPI distortion correction of a volume series using a reversed phase-encode image pair to estimate the inhomogeneity field')
lib.app.parser.add_argument('pe_axis',   help='The phase encode direction / axis; can be an axis number (0, 1 or 2) or a code (e.g. AP, LR, IS)')
lib.app.parser.add_argument('image1of2', help='The first image of the reversed-PE image pair')
lib.app.parser.add_argument('image2of2', help='The second image of the reversed-PE image pair')
lib.app.parser.add_argument('series',    help='The image series to be corrected; note that the phase-encode direction of this series should be identical to the FIRST image of the reversed-PE pair')
lib.app.parser.add_argument('output',    help='The output corrected image series')
lib.app.initialise()

if isWindows():
  errorMessage('Script cannot run on Windows due to FSL dependency')

fsl_path = os.environ.get('FSLDIR', '')
if not fsl_path:
  errorMessage('Environment variable FSLDIR is not set; please run appropriate FSL configuration script')

topup_config_path = os.path.join(fsl_path, 'etc', 'flirtsch', 'b02b0.cnf')
if not os.path.isfile(topup_config_path):
  errorMessage('Could not find necessary default config file for FSL\'s topup program\n(expected location: ' + topup_config_path + ')')

topup_cmd = 'topup'
if not binaryInPath(topup_cmd):
  topup_cmd = 'fsl5.0-topup'
  if not binaryInPath(topup_cmd):
    errorMessage('Could not find FSL program topup; please verify FSL install')

applytopup_cmd = 'applytopup'
if not binaryInPath(applytopup_cmd):
  applytopup_cmd = 'fsl5.0-applytopup'
  if not binaryInPath(applytopup_cmd):
    errorMessage('Could not find FSL program applytopup; please verify FSL install')
    
eddy_cmd = 'eddy'
if not binaryInPath(eddy_cmd):
  eddy_cmd = 'fsl5.0-eddy'
  if not binaryInPath(eddy_cmd):
    errorMessage('Could not find FSL program eddy; please verify FSL install')

fsl_suffix = getFSLSuffix()

# Figure out the phase encode axis
PE_axis = getPEAxis(lib.app.args.pe_axis)

# Convert all input images into MRtrix format and store in temprary directory first;
#   that way getHeaderInfo() can be run multiple times without having to repeatedly parse e.g. DICOM data
runCommand('mrconvert ' + lib.app.args.image1of2 + ' ' + os.path.join(lib.app.tempDir, 'pair1.mif'))
runCommand('mrconvert ' + lib.app.args.image2of2 + ' ' + os.path.join(lib.app.tempDir, 'pair2.mif'))
runCommand('mrconvert ' + lib.app.args.series    + ' ' + os.path.join(lib.app.tempDir, 'series.mif'))

lib.app.gotoTempDir()

# Verify that input images are valid
Pair1_size  = getHeaderInfo ('pair1.mif',  'size').split()
Pair2_size  = getHeaderInfo ('pair2.mif',  'size').split()
series_size = getHeaderInfo ('series.mif', 'size').split()

# Check the number of b=0 images
Pair1_bzero_count = 1
if len(Pair1_size) == 4:
  Pair1_bzero_count = int(Pair1_size[3])
elif len(Pair1_size) != 3:
  errorMessage ('First image of reversed phase-encode pair must be a 3D or 4D image')
Pair2_bzero_count = 1
if len(Pair2_size) == 4:
  Pair2_bzero_count = int(Pair2_size[3])
elif len(Pair2_size) != 3:
  errorMessage ('Second image of reversed phase-encode pair must be a 3D or 4D image')

# Do other verifications on inputs
if Pair1_size[:3] != Pair2_size[:3]:
  errorMessage ('Dimensions of reversed phase-encode image pair do not match')
if Pair1_bzero_count != Pair2_bzero_count:
  warnMessage ('Inequal number of b=0 volumes in pair; registration may be biased')
if series_size[:3] != Pair1_size[:3]:
  errorMessage ('Spatial dimensions of volume series does not match reversed-PE pair')
if len(series_size) != 4:
  errorMessage ('Third input image should be a 4D volume series')

# Get the axis strides from the input series, so the output image can be modified to match
stride = getHeaderInfo ('series.mif', 'stride')
stride_option = ' -stride ' + stride.replace(' ', ',')

# Test to see if there is any diffusion gradient encoding in the input series
grad = getHeaderInfo ('series.mif', 'dwgrad')

# Convert the input files as necessary for FSL tools
runCommand('mrcat pair1.mif pair2.mif - -axis 3 | mrconvert - pair.nii -stride +1,+2,+3,+4')
runCommand('mrconvert series.mif series_before.nii -stride +1,+2,+3,+4')

# If no axes need to be cropped, use the original 4D volume with the image pair
# Otherwise, need to call mrcrop with the appropriate options, and pass the modified images to topup
topup_imain = 'pair.nii'
series_imain = 'series_before.nii'

# For any non-even axis sizes, crop the first voxel along that dimension
crop_option = ''        
for axis, axis_size in enumerate(Pair1_size[:3]):
  if int(axis_size)%2:
    crop_option += ' -axis ' + str(axis) + ' 1 ' + str(int(axis_size)-1) 

if crop_option:
  warnMessage('Input images contain at least one non-even dimension; cropping images for topup / eddy compatibility') 
  runCommand('mrcrop pair.nii pair_crop.nii' + crop_option)
  runCommand('mrcrop series_before.nii series_crop.nii' + crop_option)
  topup_imain = 'pair_crop.nii'
  series_imain = 'series_crop.nii'

# Construct a configuration file
printMessage('Creating phase-encoding configuration file')
config_file = open('config.txt', 'w')
config_line = [ '0', '0', '0', '0.1' ]
config_line[PE_axis] = '1'
for AP_lines in range(0, Pair1_bzero_count):
  config_file.write(' '.join (config_line) + '\n')
config_line[PE_axis] = '-1'
for PA_lines in range(0, Pair2_bzero_count):
  config_file.write(' '.join (config_line) + '\n')
config_file.close()

# Perform the field estimation
runCommand(topup_cmd + ' --imain=' + topup_imain + ' --datain=config.txt --out=field --config=' + topup_config_path)

# Apply the warp field to the image series
# Note: applytopup appears to ignore FSLOUTPUTTYPE field, and just outputs a .nii.gz
runCommand(applytopup_cmd + ' --imain=' + series_imain + ' --datain=config.txt --inindex=1 --topup=field --out=series_topup' + fsl_suffix + ' --method=jac')

result_path = 'result' + os.path.splitext(lib.app.args.output)[1]

# Need to split depending on whether DW information is available
if not grad:

  printMessage('No diffusion gradient encoding found in input file; using output from applytopup')
  runCommand('mrconvert series_topup' + fsl_suffix + ' ' + result_path + stride_option)
  
else:

  printMessage('Detected diffusion gradient encoding in input file; running eddy')

  # Create the diffusion gradient table in FSL format
  # Make sure the strides are identical to the image actually being passed to eddy before exporting the gradient table
  runCommand('mrconvert series.mif - -stride +1,+2,+3,+4 | mrinfo - -export_grad_fsl bvecs bvals')
    
  # Use the initial corrected image series from applytopup to derive a processing mask for eddy
  runCommand('mrconvert series_topup' + fsl_suffix + ' -fslgrad bvecs bvals - | dwi2mask - - | maskfilter - dilate - | mrconvert - mask.nii -datatype float32')
  
  # Generate configuration file for eddy - index referring to PE and bandwidth for each volume
  # In this particular use case, we assume that every volume in the series has the same imaging parameters as the first of the reversed-PE pair
  # Therefore, every volume has an index of 1
  
  # Need to find the number of input volumes
  # For this, import bvals and count the number of entries
  bvals_input = open('bvals', 'r')
  bvals = bvals_input.read()
  bvals = bvals.strip().split()
  num_volumes = len(bvals)
  
  indices = ''
  for volume in range(0, num_volumes):
    indices = indices + '1 '
  with open('indices.txt', 'w') as index_file:
    index_file.write(indices);
  
  # Run eddy
  runCommand(eddy_cmd + ' --imain=' + series_imain + ' --mask=mask.nii --index=indices.txt --acqp=config.txt --bvecs=bvecs --bvals=bvals --topup=field --out=series_after')
  
  # Convert the resulting volume to the output image, and re-insert the diffusion encoding
  # Note that currently the script uses the diffusion encoding from the original DWI volumes, i.e. no reorientation of diffusion
  #   gradient vectors is performed. It should be possible to get the motion parameters from the eddy 
  #   text file output and modify them manually, or FMRIB may update eddy itself (this is why bvecs / bvals are
  #   re-imported here)
  runCommand('mrconvert series_after' + fsl_suffix + ' ' + result_path + stride_option + ' -fslgrad bvecs bvals')
  
lib.app.moveFileToDest(result_path, lib.app.args.output)
lib.app.complete()

