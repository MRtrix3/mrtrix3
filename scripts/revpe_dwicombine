#!/usr/bin/env python

# Script for performing EPI distortion correction using FSL 5.0 tools eddy / topup / applytopup

# This script is only for the specific case where two DWI acquisitions have taken place, each containing precisely the same set of diffusion directions, and each contains at least one b=0 image, but the phase encode direction is precisely reversed in the second acquisition. These b=0 images are extracted by the script for the purpose of estimating the inhomogeneity field, and a single image file is produced that contains a single re-combined image volume per diffusion volume.

# Order of arguments is as follows:
# 1. First DWI volume image file
# 2. Second DWI volume image file
# 3. Phase encode axis (0, 1 or 2)
# 4. Output DWI volume image file

# Note that some versions of FSL's eddy tool appear to have a bug. If the script crashes with an error "These data are incompatible with least-squares reconstruction"... that's the bug. If you encounter this, you can try updating FSL; or if you are able to compile from the FSL source code, you can try the following fix (it's where I think the problem is, but haven't tested it).
# File EddyUtils.cpp, line 58:
#   double dp = NEWMAT::DotProduct(s1.GetAcqPara().PhaseEncodeVector(),s1.GetAcqPara().PhaseEncodeVector());
# change to:
#   double dp = NEWMAT::DotProduct(s1.GetAcqPara().PhaseEncodeVector(),s2.GetAcqPara().PhaseEncodeVector());

# Seems this isn't the only issue remaining in FSL that prevents the use of eddy in image recombination (as of 5.0.7). Therefore this script uses a different volume recombination method, as described in Skare and Bammer, ISMRM 2010


import os, sys
import lib.app

from lib.binaryInPath  import binaryInPath
from lib.delFile       import delFile
from lib.errorMessage  import errorMessage
from lib.getFSLSuffix  import getFSLSuffix
from lib.getHeaderInfo import getHeaderInfo
from lib.getPEAxis     import getPEAxis
from lib.isWindows     import isWindows
from lib.printMessage  import printMessage
from lib.runCommand    import runCommand
from lib.warnMessage   import warnMessage

lib.app.initCitations([ 'eddy/topup', 'FSL', 'Skare2010' ])
lib.app.initParser('Perform EPI distortion & recombination of a pair of image volumes, where the diffusion gradient table is identical between the two series, but the phase-encode direction is reversed')
lib.app.parser.add_argument('pe_axis', help='The phase encode direction / axis; can be an axis number (0, 1 or 2) or a code (e.g. AP, LR, IS)')
lib.app.parser.add_argument('series1', help='The first input image series')
lib.app.parser.add_argument('series2', help='The second input image series')
lib.app.parser.add_argument('output',  help='The output image series')
lib.app.initialise()

if isWindows():
  errorMessage('Script cannot run on Windows due to FSL dependency')

fsl_path = os.environ.get('FSLDIR', '')
if not fsl_path:
  errorMessage('Environment variable FSLDIR is not set; please run appropriate FSL configuration script')

topup_config_path = os.path.join(fsl_path, 'etc', 'flirtsch', 'b02b0.cnf')
if not os.path.isfile(topup_config_path):
  errorMessage('Could not find necessary default config file for FSL\'s topup program\n(expected location: ' + topup_config_path + ')')

topup_cmd = 'topup'
if not binaryInPath(topup_cmd):
  topup_cmd = 'fsl5.0-topup'
  if not binaryInPath(topup_cmd):
    errorMessage('Could not find FSL program topup; please verify FSL install')

applytopup_cmd = 'applytopup'
if not binaryInPath(applytopup_cmd):
  applytopup_cmd = 'fsl5.0-applytopup'
  if not binaryInPath(applytopup_cmd):
    errorMessage('Could not find FSL program applytopup; please verify FSL install')
    
eddy_cmd = 'eddy'
if not binaryInPath(eddy_cmd):
  eddy_cmd = 'fsl5.0-eddy'
  if not binaryInPath(eddy_cmd):
    errorMessage('Could not find FSL program eddy; please verify FSL install')

fsl_suffix = getFSLSuffix()


# Figure out the phase encode axis
PE_axis = getPEAxis(lib.app.args.pe_axis)

# Convert all input images into MRtrix format and store in temprary directory first;
#   that way getHeaderInfo() can be run multiple times without having to repeatedly parse e.g. DICOM data
runCommand('mrconvert ' + lib.app.args.series1 + ' ' + os.path.join(lib.app.tempDir, 'dwi1.mif'))
runCommand('mrconvert ' + lib.app.args.series2 + ' ' + os.path.join(lib.app.tempDir, 'dwi2.mif'))

# TODO Enhancement: If diffusion encoding is not embedded within the input files,
#   check the directory (/ies) of the input files for bvecs / bvals pair

lib.app.gotoTempDir()

# Verify that input images are valid
DWI1_size = getHeaderInfo ('dwi1.mif', 'size').split()
DWI2_size = getHeaderInfo ('dwi2.mif', 'size').split()

if len(DWI1_size) != 4:
  errorMessage ('First input image must be a 4D image')
if len(DWI2_size) != 4:
  errorMessage ('Second input image must be a 4D image')
if DWI1_size != DWI1_size:
  errorMessage ('Dimensions of input image file pair do not match')
  
# Get the axis strides from one of the input images, so the output image can be modified to match
stride = getHeaderInfo ('dwi1.mif', 'stride')
stride_option = ' -stride ' + stride.replace(' ', ',')

# The image transform will be used later
transform = getHeaderInfo('dwi1.mif', 'transform')

# Eddy refuses to operate if the phase encode axis is 2
# Therefore, use mrconvert to permute the data onto new axes, enforcing axis 1 as the PE direction;
#   then re-permute back to the original layout after all the hard work is done
# Hopefully this doesn't cause issues w.r.t. gradient encoding; eddy doesn't do any reorientation, and
#   the axes are permuted back afterwards. However if gradient reorientation was to be performed,
#   this step would need to be taken into account.
axis_permute_option = ''
vox_permute_option = ''
orig_vox = getHeaderInfo ('dwi1.mif', 'vox').split()
DWI1_permaxes = 'dwi1.mif'
DWI2_permaxes = 'dwi2.mif'
if PE_axis == 0:
  axis_permute_option = ' -axes 1,0,2,3'
  new_vox = [ orig_vox[1], orig_vox[0], orig_vox[2], orig_vox[3] ]
  vox_permute_option = ' -vox ' + ','.join(new_vox)
  DWI1_size = [ DWI1_size[1], DWI1_size[0], DWI1_size[2], DWI1_size[3] ]
  DWI1_permaxes = 'dwi1p.mif'
  DWI2_permaxes = 'dwi2p.mif'
elif PE_axis == 2:
  axis_permute_option = ' -axes 0,2,1,3'
  new_vox = [ orig_vox[0], orig_vox[2], orig_vox[1], orig_vox[3] ]
  vox_permute_option = ' -vox ' + ','.join(new_vox)
  DWI1_size = [ DWI1_size[0], DWI1_size[2], DWI1_size[1], DWI1_size[3] ]
  DWI1_permaxes = 'dwi1p.mif'
  DWI2_permaxes = 'dwi2p.mif'

if axis_permute_option:
  printMessage ('Permuting axes so PE is axis 1')
  runCommand('mrconvert dwi1.mif dwi1p.mif' + axis_permute_option + vox_permute_option)
  delFile('dwi1.mif')
  runCommand('mrconvert dwi2.mif dwi2p.mif' + axis_permute_option + vox_permute_option)
  delFile('dwi2.mif')
else:
  printMessage ('No axis permutation required; skipping step')

spatial_sizes = DWI1_size[:3]
num_volumes = DWI1_size[3]

# Convert the input files as necessary for FSL tools & later commands
runCommand('mrinfo ' + DWI1_permaxes + ' -export_grad_mrtrix grad1.b')
runCommand('mrinfo ' + DWI2_permaxes + ' -export_grad_mrtrix grad2.b')
runCommand('dwiextract ' + DWI1_permaxes + ' -bzero dwi1b0.mif')
runCommand('dwiextract ' + DWI2_permaxes + ' -bzero dwi2b0.mif')
runCommand('mrconvert ' + DWI1_permaxes + ' dwi1.nii -stride +1,+2,+3,+4')
delFile(DWI1_permaxes)
runCommand('mrconvert ' + DWI2_permaxes + ' dwi2.nii -stride +1,+2,+3,+4')
delFile(DWI2_permaxes)
runCommand('mrcat dwi1.nii dwi2.nii dwiall.nii -axis 3')

runCommand('mrcat dwi1b0.mif dwi2b0.mif - -axis 3 | mrconvert - b0all.nii -stride +1,+2,+3,+4')

# Find out how many b=0 volumes there are
DWI1_b0_size = getHeaderInfo ('dwi1b0.mif', 'size').split()
DWI2_b0_size = getHeaderInfo ('dwi2b0.mif', 'size').split()
delFile('dwi1b0.mif')
delFile('dwi2b0.mif')
DWI1_b0_count = int(1)
if len(DWI1_b0_size) == 4:
  DWI1_b0_count = int(DWI1_b0_size[3])
DWI2_b0_count = int(1)
if len(DWI2_b0_size) == 4:
  DWI2_b0_count = int(DWI2_b0_size[3])
DWI2_config_index = str(DWI1_b0_count + 1)

# If no axes need to be cropped, use the original 4D volume with the image pair
# Otherwise, need to call mrcrop with the appropriate options, and pass the modified images to topup
topup_imain = 'b0all.nii'
series_imain = 'dwiall.nii'
applytopup_imain_one = 'dwi1.nii'
applytopup_imain_two = 'dwi2.nii'

# For any non-even dimensions, crop the first voxel along that dimension
crop_option = ''
for axis, axis_dim in enumerate(spatial_sizes):
  if int(axis_dim)%2:
    crop_option += ' -axis ' + str(axis) + ' 1 ' + str(int(axis_dim)-1) 

if crop_option:
  warnMessage('Input images contain at least one non-even dimension; cropping images for topup / eddy compatibility') 
  runCommand('mrcrop b0all.nii b0all_crop.nii' + crop_option)
  topup_imain = 'b0all_crop.nii'
  delFile('b0all.nii')
  runCommand('mrcrop dwiall.nii dwiall_crop.nii' + crop_option)
  series_imain = 'dwiall_crop.nii'
  delFile('dwiall.nii')
  runCommand('mrcrop dwi1.nii dwi1_crop.nii' + crop_option)
  applytopup_imain_one = 'dwi1_crop.nii'
  delFile('dwi1.nii')
  runCommand('mrcrop dwi2.nii dwi2_crop.nii' + crop_option)
  applytopup_imain_two = 'dwi2_crop.nii'
  delFile('dwi2.nii')

# Construct a configuration file
printMessage('Creating phase-encoding configuration file')
config_file = open('config.txt', 'w')
config_line = '0 1 0 0.1\n'
for line_count in range(0,DWI1_b0_count):
  config_file.write(config_line)
config_line = '0 -1 0 0.1\n'
for line_count in range(0,DWI2_b0_count):
  config_file.write(config_line)
config_file.close()

# Perform the field estimation
runCommand(topup_cmd + ' --imain=' + topup_imain + ' --datain=config.txt --out=field --fout=field_map' + fsl_suffix + ' --config=' + topup_config_path)
delFile(topup_imain)

# Concatenate the diffusion gradient tables
filenames = [ 'grad1.b', 'grad2.b' ]
with open('grad_combined.b', 'w') as outfile:
  for fname in filenames:
    with open(fname) as infile:
      outfile.write (infile.read())

# Generate an initial distortion-corrected volume
# TODO The string '[ 0 0 0 1 ]' is being written to stdout somewhere here...
runCommand(applytopup_cmd + ' --imain=' + applytopup_imain_one + ' --datain=config.txt --inindex=1 --topup=field --out=dwi1_topup' + fsl_suffix + ' --method=jac --interp=trilinear')
delFile(applytopup_imain_one)
runCommand(applytopup_cmd + ' --imain=' + applytopup_imain_two + ' --datain=config.txt --inindex=' + DWI2_config_index + ' --topup=field --out=dwi2_topup' + fsl_suffix + ' --method=jac --interp=trilinear')
delFile(applytopup_imain_two)
runCommand('mrcat dwi1_topup' + fsl_suffix + ' dwi2_topup' + fsl_suffix + ' - -axis 3 | mrconvert - topup_combined.mif -grad grad_combined.b')
delFile('dwi1_topup' + fsl_suffix)
delFile('dwi2_topup' + fsl_suffix)

# Produce a brain mask based on this initial correction
runCommand('dwi2mask topup_combined.mif mask.mif -grad grad_combined.b')
runCommand('maskfilter mask.mif dilate - | mrconvert - mask_dil.nii -datatype float32')

# Create the diffusion gradient table in FSL format
runCommand('mrinfo topup_combined.mif -export_grad_fsl bvecs bvals')

delFile('topup_combined.mif')
    
# When producing this config file, it's possible that the first DWI input has more than one b=0 image
# In that case, all volumes in the second DWI input need to refer to one of the config file lines
#   that was set based on the b=0's in the second input
# TODO A better setup here would be: for each volume, give the index of the b=0 image in the config file
#   that is closest in time (this is because eddy uses the motion parameters from topup as an initial estimate)
indices = ''
for volume in range(0,int(num_volumes)):
  indices = indices + '1 '
for volume in range(0,int(num_volumes)):
  indices = indices + DWI2_config_index + ' '
with open('indices.txt', 'w') as index_file:
  index_file.write(indices);

# Run eddy
# Looks like least-squares reconstruction is not supported in the publicly-available eddy code
# Instead, generate a Jacobian-modulated output image for each volume, get the field image from topup, and
#   do a manual combination using the equation from Skare and Bammer ISMRM 2010
runCommand('eddy --imain=' + series_imain + ' --mask=mask_dil.nii --index=indices.txt --acqp=config.txt --bvecs=bvecs --bvals=bvals --topup=field --out=eddy_output --resamp=jac')
delFile(series_imain)

# Derive the weight images
# To properly get a voxel displacement field, need to scale the field map (which is output in Hz) appropriately
# Scaling appears to be correct; however FSL is a bit ambiguous when it comes to image transforms & strides
# Looks like topup flips the x-axis on output (both corrected images and field), and erases image transform
# Eddy seems to expect this and operates accordingly; but since we're doing things external to FSL and
#   voxel-by-voxel, need to do the flip explicitly; also import the transform from the first input image
#   for the sake of visualisation
with open( 'dwi1_transform.txt', 'w' ) as f:
  for line in transform:
    f.write (line)
runCommand('mrtransform field_map' + fsl_suffix + ' - -flip 0 -linear dwi1_transform.txt -replace | mrconvert - field_map_flip.mif' + stride_option)
delFile('field_map' + fsl_suffix)

# Scaling term for field map is identical to the bandwidth provided in the topup config file
#   (converts Hz to pixel count; that way a simple image gradient can be used to get the Jacobians)
# Let mrfilter apply the default 1 voxel size gaussian smoothing filter before calculating the field gradient
runCommand('mrcalc field_map_flip.mif 0.1 -mult - | mrfilter - gradient - | mrconvert - field_deriv_pe.mif -coord 3 1 -axes 0,1,2')
delFile('field_map_flip.mif')
runCommand('mrcalc 1.0 field_deriv_pe.mif -add 0.0 -max jacobian1.mif')
runCommand('mrcalc 1.0 field_deriv_pe.mif -sub 0.0 -max jacobian2.mif')
delFile('field_deriv_pe.mif')
runCommand('mrcalc jacobian1.mif jacobian1.mif -mult weight1.mif')
runCommand('mrcalc jacobian2.mif jacobian2.mif -mult weight2.mif')
delFile('jacobian1.mif')
delFile('jacobian2.mif')
runCommand('mrcalc weight1.mif weight2.mif -add sum_weights.mif')

# Manually combine corresponding volumes from EDDY output
runCommand('mrconvert eddy_output' + fsl_suffix + ' corrected1.mif -coord 3 0:' + str(int(num_volumes)-1) + stride_option)
runCommand('mrconvert eddy_output' + fsl_suffix + ' corrected2.mif -coord 3 ' + num_volumes + ':' + str((int(num_volumes)*2)-1) + stride_option)
delFile('eddy_output' + fsl_suffix)
result_path = 'result' + os.path.splitext(lib.app.args.output)[1]
runCommand('mrcalc corrected1.mif weight1.mif -mult corrected2.mif weight2.mif -mult -add sum_weights.mif -divide 0.0 -max - | mrconvert - ' + result_path + ' -grad grad1.b' + axis_permute_option + vox_permute_option)

lib.app.moveFileToDest(result_path, lib.app.args.output)
lib.app.complete()

