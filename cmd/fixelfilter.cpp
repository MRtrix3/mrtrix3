/*
 * Copyright (c) 2008-2018 the MRtrix3 contributors.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/
 *
 * MRtrix3 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * For more details, see http://www.mrtrix.org/
 */


#include "command.h"
#include "header.h"
#include "image.h"
#include "progressbar.h"
#include "file/path.h"
#include "file/utils.h"
#include "fixel/helpers.h"

#include "fixel/filter/base.h"
#include "fixel/filter/connect.h"
#include "fixel/filter/smooth.h"
#include "fixel/matrix.h"
#include "stats/cfe.h"



using namespace MR;
using namespace App;
using namespace MR::Fixel;

const char* const filters[] = { "connect", "smooth", nullptr };

void usage ()
{
  AUTHOR = "Robert E. Smith (robert.smith@florey.edu.au)";

  SYNOPSIS = "Perform filtering operations on fixel-based data";

  DESCRIPTION
  + "If the first input to the command is a specific fixel data file, then a filtered version of only that file "
    "will be generated by the command. Alternatively, if the input is the location of a fixel directory, then the "
    "command will create a duplicate of the fixel directory, and apply the specified filter operation to all "
    "fixel data files within the directory."

  + "For the smoothing filter, it is typically recommended that the provided fixel-fixel connectivity matrix should "
    "include both streamline-based connection strength and spatial distance between fixels; this can be generated "
    "by the MRtrix3 command fixelconnectivity, specifically using the -smoothing option.";

  ARGUMENTS
  + Argument ("input", "the input: either a fixel data file, or a fixel directory (see Description)").type_various()
  + Argument ("filter", "the filtering operation to perform; options are: " + join (filters, ", ")).type_choice (filters)
  + Argument ("output", "the output: either a fixel data file, or a fixel directory (see Description)").type_various();

  OPTIONS
  + Option ("matrix", "provide a fixel-fixel connectivity matrix for filtering operations that require it").required()
    + Argument ("file").type_directory_in()

  + OptionGroup ("Options specific to the \"smooth\" filter")
  + Option ("fwhm", "the full-width half-maximum (FWHM) of the spatial component of the smoothing filter (default = " + str(DEFAULT_FIXEL_SMOOTHING_FWHM) + "mm)")
    + Argument ("value").type_float (0.0)
  + Option ("mask", "only perform smoothing within a specified binary fixel mask")
    + Argument ("image").type_image_in();


}



using value_type = float;


void run()
{
  Header index_header;
  Image<float> single_file;
  vector<Header> multiple_files;
  Header output_header;
  try {
    index_header = Fixel::find_index_header (argument[0]);
    multiple_files = Fixel::find_data_headers (argument[0], index_header);
    if (multiple_files.empty())
      throw Exception ("No fixel data files found in directory \"" + argument[0] + "\"");
    output_header = Header (multiple_files[0]);
  } catch (...) {
    try {
      index_header = Fixel::find_index_header (Fixel::get_fixel_directory (argument[0]));
      single_file = Image<float>::open (argument[0]);
      Fixel::check_data_file (single_file);
      output_header = Header (single_file);
    } catch (...) {
      throw Exception ("Could not interpret first argument \"" + argument[0] + "\" as either a fixel data file, or a fixel directory");
    }
  }

  if (single_file.valid() && !Fixel::fixels_match (index_header, single_file))
    throw Exception ("File \"" + argument[0] + "\" is not a valid fixel data file (does not match corresponding index image)");

  auto opt = get_options ("matrix");
  Fixel::Matrix::Reader matrix (opt[0][0]);

  Image<index_type> index_image = index_header.get_image<index_type>();
  const size_t nfixels = Fixel::get_number_of_fixels (index_image);
  if (nfixels != matrix.size())
    throw Exception ("Number of fixels in input (" + str(nfixels) + ") does not match number of fixels in connectivity matrix (" + str(matrix.size()) + ")");

  std::unique_ptr<Fixel::Filter::Base> filter;
  switch (int(argument[1])) {
    case 0:
      filter.reset (new Fixel::Filter::Connect (matrix));
      output_header.datatype() = DataType::UInt32;
      output_header.datatype().set_byte_order_native();
      break;
    case 1:
    {
      const float fwhm = get_option_value ("fwhm", float(DEFAULT_FIXEL_SMOOTHING_FWHM));
      opt = get_options ("mask");
      if (opt.size()) {
        Image<bool> mask_image = Image<bool>::open (opt[0][0]);
        filter.reset (new Fixel::Filter::Smooth (index_image, matrix, mask_image, fwhm));
      } else {
        filter.reset (new Fixel::Filter::Smooth (index_image, matrix, fwhm));
      }
    }
      break;
    default:
      assert (0);
  }

  if (single_file.valid()) {
    auto output_image = Image<float>::create (argument[2], single_file);
    CONSOLE (std::string ("Applying \"") + filters[argument[1]] + "\" operation to fixel data file \"" + single_file.name() + "\"");
    (*filter) (single_file, output_image);
  } else {
    Fixel::copy_index_and_directions_file (argument[0], argument[2]);
    ProgressBar progress (std::string ("Applying \"") + filters[argument[1]] + "\" operation to " + str(multiple_files.size()) + " fixel data files",
                          multiple_files.size());
    for (auto& H : multiple_files) {
      auto input_image = H.get_image<float>();
      auto output_image = Image<float>::create (Path::join (argument[2], Path::basename (H.name())), H);
      (*filter) (input_image, output_image);
      ++progress;
    }
  }

}
