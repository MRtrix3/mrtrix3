#!/usr/bin/env python

SUPPORTED_OPS = ['mean', 'median', 'sum', 'product', 'rms', 'norm', 'var', 'std', 'min', 'max', 'absmax', 'magmax']


def usage(cmdline): #pylint: disable=unused-variable
  cmdline.set_author('Daan Christiaens (daan.christiaens@kcl.ac.uk)')
  cmdline.set_synopsis('Apply an mrmath operation to each b-value shell in a DWI series')
  cmdline.add_description('The output of this command is a 4D image, where '
                          'each volume corresponds to a b-value shell (in order of increasing b-value), and '
                          'the intensities within each volume correspond to the chosen statistic having been computed from across the DWI volumes belonging to that b-value shell.')
  cmdline.add_argument('input', help='The input diffusion MRI series')
  cmdline.add_argument('operation', choices=SUPPORTED_OPS, help='The operation to be applied to each shell; this must be one of the following: ' + ', '.join(SUPPORTED_OPS))
  cmdline.add_argument('output', help='The output image series')
  cmdline.add_example_usage('To compute the mean diffusion-weighted signal in each b-value shell',
                            'dwishellmath dwi.mif mean shellmeans.mif')
  grad_import = cmdline.add_argument_group('Options for importing the gradient table')
  grad_import.add_argument('-grad', help='Provide a gradient table in MRtrix format')
  grad_import.add_argument('-fslgrad', nargs=2, metavar=('bvecs', 'bvals'), help='Provide a gradient table in FSL bvecs/bvals format')
  cmdline.flag_mutually_exclusive_options( ['grad', 'fslgrad' ])


def execute(): #pylint: disable=unused-variable
  from mrtrix3 import app, image, MRtrixError, path, run #pylint: disable=no-name-in-module
  # check inputs and outputs
  dwi_header = image.Header(path.from_user(app.ARGS.input, False))
  if len(dwi_header.size()) != 4:
    raise MRtrixError('Input image must be a 4D image')
  gradimport = ''
  if app.ARGS.grad:
    gradimport = ' -grad ' + path.from_user(app.ARGS.grad)
  elif app.ARGS.fslgrad:
    gradimport = ' -fslgrad ' + path.from_user(app.ARGS.fslgrad[0]) + ' ' + path.from_user(app.ARGS.fslgrad[1])
  elif 'dw_scheme' not in dwi_header.keyval():
    raise MRtrixError('No diffusion gradient table provided, and none present in image header')
  app.check_output_path(app.ARGS.output)
  # import data and gradient table
  app.make_scratch_dir()
  run.command('mrconvert ' + path.from_user(app.ARGS.input) + ' ' + path.to_scratch('in.mif') + gradimport + ' -strides 0,0,0,1')
  app.goto_scratch_dir()
  # run per-shell operations
  files = []
  for index, bvalue in enumerate(image.mrinfo('in.mif', 'shell_bvalues').split()):
    filename = 'shell-{:02d}.mif'.format(index)
    run.command('dwiextract -shells ' + bvalue + ' in.mif - | mrmath -axis 3 - ' + app.ARGS.operation + ' ' + filename)
    files.append(filename)
  # concatenate to output file
  run.command('mrcat -axis 3 ' + ' '.join(files) + ' out.mif')
  run.command('mrconvert out.mif ' + path.from_user(app.ARGS.output) + app.mrconvert_output_option(path.from_user(app.ARGS.input)))


# Execute the script
import mrtrix3 #pylint: disable=unused-variable, unused-import
