#!/usr/bin/env python

# Copyright (c) 2008-2019 the MRtrix3 contributors.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Covered Software is provided under this License on an "as is"
# basis, without warranty of any kind, either expressed, implied, or
# statutory, including, without limitation, warranties that the
# Covered Software is free of defects, merchantable, fit for a
# particular purpose or non-infringing.
# See the Mozilla Public License v. 2.0 for more details.
#
# For more details, see http://www.mrtrix.org/.

# Script for estimating response functions for spherical deconvolution
# A number of different approaches are available within this script for performing response function estimation.



def usage(cmdline): #pylint: disable=unused-variable
  from mrtrix3 import algorithm, app #pylint: disable=no-name-in-module, import-outside-toplevel

  cmdline.set_author('Warda Syeda (wtsyeda@unimelb.edu.au) and Robert E. Smith (robert.smith@florey.edu.au)')
  cmdline.set_synopsis('Generate binary mask for DWI data')
  cmdline.add_description('Create a brain mask for DWI data')
  cmdline.add_description('Each algorithm available has its own help page, including necessary references; e.g. to see the help page of the \'fslbet\' algorithm, type \'dwi2mask fslbet\'.')

  # General options
  #common_options = cmdline.add_argument_group('General dwi2mask options')
  app.add_dwgrad_import_options(cmdline)

  # Import the command-line settings for all algorithms found in the relevant directory
  algorithm.usage(cmdline)


def execute(): #pylint: disable=unused-variable
  from mrtrix3 import MRtrixError #pylint: disable=no-name-in-module, import-outside-toplevel
  from mrtrix3 import algorithm, app, image, path, run #pylint: disable=no-name-in-module, import-outside-toplevel

  # Find out which algorithm the user has requested
  alg = algorithm.get_module(app.ARGS.algorithm)

  # Check for prior existence of output files, and grab any input files, used by the particular algorithm
  alg.check_output_paths()

  grad_import_option = app.read_dwgrad_import_options()
  if not grad_import_option and 'dw_scheme' not in image.Header(path.from_user(app.ARGS.input, False)).keyval():
    raise MRtrixError('Script requires diffusion gradient table: either in image header, or using -grad / -fslgrad option')

  app.make_scratch_dir()

  # Get standard input data into the scratch directory
 # Don't discard b=0 in multi-shell algorithms
  app.console('Importing DWI data (' + path.from_user(app.ARGS.input) + ')...')
  run.command('mrconvert ' + path.from_user(app.ARGS.input) + ' ' + path.to_scratch('dwi.mif') + ' -strides 0,0,0,1' + grad_import_option, show=False)

  alg.get_inputs()

  app.goto_scratch_dir()
  app.console('Computing brain mask (dwi2mask)...')

  # From here, the script splits depending on what estimation algorithm is being used
  alg.execute()

# Execute the script
import mrtrix3
mrtrix3.execute() #pylint: disable=no-member
