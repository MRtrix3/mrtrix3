#!/usr/bin/env python



def usage(cmdline): #pylint: disable=unused-variable
  cmdline.setAuthor('David Raffelt (david.raffelt@florey.edu.au)')
  cmdline.setSynopsis('Performs a global DWI intensity normalisation on a group of subjects using the median b=0 white matter value as the reference')
  cmdline.addDescription('The white matter mask is estimated from a population average FA template then warped back to each subject to perform the intensity normalisation. Note that bias field correction should be performed prior to this step.')
  cmdline.add_argument('input_dir', help='The input directory containing all DWI images')
  cmdline.add_argument('mask_dir', help='Input directory containing brain masks, corresponding to one per input image (with the same file name prefix)')
  cmdline.add_argument('output_dir', help='The output directory containing all of the intensity normalised DWI images')
  cmdline.add_argument('fa_template', help='The output population specific FA template, which is threshold to estimate a white matter mask')
  cmdline.add_argument('wm_mask', help='The output white matter mask (in template space), used to estimate the median b=0 white matter value for normalisation')
  options = cmdline.add_argument_group('Options for the dwiintensitynorm script')
  options.add_argument('-fa_threshold', default='0.4', help='The threshold applied to the Fractional Anisotropy group template used to derive an approximate white matter mask (default: 0.4)')






import os

def abspath(*arg):
  return os.path.abspath(os.path.join(*arg))

def relpath(*arg):
  return os.path.relpath(os.path.join(*arg), app.workingDir)

class Input(object):
  def __init__(self, filename, prefix, directory, mask_filename = '', mask_directory = ''):
    self.filename = filename
    self.prefix = prefix
    self.directory = directory
    self.mask_filename = mask_filename
    self.mask_directory = mask_directory






def execute(): #pylint: disable=unused-variable
  from mrtrix3 import fsys, image, MRtrixError, run

  app.args.input_dir = relpath(app.args.input_dir)
  inputDir = app.args.input_dir
  if not os.path.exists(inputDir):
    raise MRtrixError('input directory not found')
  inFiles = fsys.allInDir(inputDir, dir_path=False)
  if len(inFiles) <= 1:
    app.console('not enough images found in input directory. More than one image is needed to perform a group-wise intensity normalisation')
  else:
    app.console('performing global intensity normalisation on ' + str(len(inFiles)) + ' input images')

  app.args.mask_dir = relpath(app.args.mask_dir)
  maskDir = app.args.mask_dir
  if not os.path.exists(maskDir):
    raise MRtrixError('mask directory not found')
  maskFiles = fsys.allInDir(maskDir, dir_path=False)
  if len(maskFiles) != len(inFiles):
    raise MRtrixError('the number of images in the mask directory does not equal the number of images in the input directory')
  maskCommonPostfix = fsys.commonPostfix(maskFiles)
  maskPrefixes = []
  for m in maskFiles:
    maskPrefixes.append(m.split(maskCommonPostfix)[0])

  commonPostfix = fsys.commonPostfix(inFiles)
  input_list = []
  for i in inFiles:
    subj_prefix = i.split(commonPostfix)[0]
    if subj_prefix not in maskPrefixes:
      raise MRtrixError ('no matching mask image was found for input image ' + i)
    image.check3DNonunity(os.path.join(fsys.fromUser(inputDir, False), i))
    index = maskPrefixes.index(subj_prefix)
    input_list.append(Input(i, subj_prefix, fsys.fromUser(inputDir, False), maskFiles[index], fsys.fromUser(maskDir, False)))

  app.checkOutputPath(app.args.fa_template)
  app.checkOutputPath(app.args.wm_mask)
  app.checkOutputPath(app.args.output_dir)
  fsys.makeDir(app.args.output_dir)

  app.makeTempDir()

  maskTempDir = os.path.join(app.tempDir, os.path.basename(os.path.normpath(maskDir)))
  run.command('cp -R -L ' + maskDir + ' ' + maskTempDir)

  app.gotoTempDir()

  fsys.makeDir('fa')
  progress = app.progressBar('Computing FA images', len(input_list))
  for i in input_list:
    run.command('dwi2tensor ' + abspath(i.directory, i.filename) + ' -mask ' + abspath(i.mask_directory, i.mask_filename) + ' - | tensor2metric - -fa ' + os.path.join('fa', i.prefix + '.mif'))
    progress.increment()
  progress.done()

  app.console('Generating FA population template')
  run.command('population_template fa -mask_dir ' + maskTempDir + ' fa_template.mif -type rigid_affine_nonlinear -rigid_scale 0.25,0.5,0.8,1.0 -affine_scale 0.7,0.8,1.0,1.0 -nl_scale 0.5,0.75,1.0,1.0,1.0 -nl_niter 5,5,5,5,5 -tempdir population_template -linear_no_pause -nocleanup')

  app.console('Generating WM mask in template space')
  run.command('mrthreshold fa_template.mif -abs ' +  app.args.fa_threshold + ' template_wm_mask.mif')

  progress = app.progressBar('Intensity normalising subject images', len(input_list))
  fsys.makeDir('wm_mask_warped')
  for i in input_list:
    run.command('mrtransform template_wm_mask.mif -interp nearest -warp_full ' + os.path.join('population_template', 'warps', i.prefix + '.mif') + ' ' + os.path.join('wm_mask_warped', i.prefix + '.mif') + ' -from 2 -template ' + os.path.join('fa', i.prefix + '.mif'))
    run.command('dwinormalise ' + abspath(i.directory, i.filename) + ' ' + os.path.join('wm_mask_warped', i.prefix + '.mif') + ' ' + fsys.fromUser(os.path.join(app.args.output_dir, i.filename), True) + app.mrconvertOutputOption(fsys.fromUser(os.path.join(inputDir, i.filename), True)))
    progress.increment()
  progress.done()

  app.console('Exporting template images to user locations')
  run.command('mrconvert template_wm_mask.mif ' + fsys.fromUser(app.args.wm_mask, True) + app.mrconvertOutputOption('NULL'))
  run.command('mrconvert fa_template.mif ' + fsys.fromUser(app.args.fa_template, True) + app.mrconvertOutputOption('NULL'))






# Make the corresponding MRtrix3 Python libraries available
import inspect, sys
lib_folder = os.path.realpath(os.path.join(os.path.dirname(os.path.realpath(inspect.getfile(inspect.currentframe()))), os.pardir, 'lib'))
if not os.path.isdir(lib_folder):
  sys.stderr.write('Unable to locate MRtrix3 Python libraries')
  sys.exit(1)
sys.path.insert(0, lib_folder)
# Execute the script
from mrtrix3 import app
app.execute()
