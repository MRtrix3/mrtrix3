#!/usr/bin/python3

# Copyright (c) 2008-2021 the MRtrix3 contributors.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Covered Software is provided under this License on an "as is"
# basis, without warranty of any kind, either expressed, implied, or
# statutory, including, without limitation, warranties that the
# Covered Software is free of defects, merchantable, fit for a
# particular purpose or non-infringing.
# See the Mozilla Public License v. 2.0 for more details.
#
# For more details, see http://www.mrtrix.org/.


def usage(cmdline): #pylint: disable=unused-variable
  from mrtrix3 import app #pylint: disable=no-name-in-module, import-outside-toplevel
  cmdline.set_author('Remika Mito (remika.mito@florey.edu.au) and Robert E. Smith (robert.smith@florey.edu.au)')
  cmdline.set_synopsis('Create a glass brain from mask input')
  #cmdline.add_description('The output of this command is a 4D image, where '
  #                        'each volume corresponds to a b-value shell (in order of increasing b-value), and '
  #                        'the intensities within each volume correspond to the chosen statistic having been computed from across the DWI volumes belonging to that b-value shell.')
  cmdline.add_argument('input', help='The input mask image')
  cmdline.add_argument('output', help='The output glass brain image')
  cmdline.add_argument('-scale', type=float, default=2.0, help='Provide resolution usscaling value; default = 2.0')
  cmdline.add_argument('-smooth', type=float, default=1.0, help='Provide standard deviation of smoothing (in mm); default = 1.0')


def execute(): #pylint: disable=unused-variable
  from mrtrix3 import MRtrixError #pylint: disable=no-name-in-module, import-outside-toplevel
  from mrtrix3 import app, image, path, run #pylint: disable=no-name-in-module, import-outside-toplevel

  ### something here to check mask; if not convert to mask?? ###
  app.check_output_path(app.ARGS.output)

  # import data to scratch directory
  app.make_scratch_dir()
  run.command('mrconvert ' + path.from_user(app.ARGS.input) + ' ' + path.to_scratch('in.mif') + ' -datatype bit')
  app.goto_scratch_dir()

  scale_option = ' -scale ' + str(app.ARGS.scale)
  smooth_option = ' -stdev ' + str(app.ARGS.smooth)

  # run scaling step
  run.command('mrgrid in.mif regrid upsampled.mif' + scale_option)

  # run upsampling step
  run.command('mrfilter upsampled.mif smooth upsampled_smooth.mif' + smooth_option)

  # threshold image
  run.command('mrthreshold upsampled_smooth.mif -abs 0.5 upsampled_smooth_thresh.mif')

  # dilate image for subtraction
  run.command('maskfilter upsampled_smooth_thresh.mif dilate -npass 2 upsampled_smooth_thresh_dilate.mif')

  # create border
  run.command('mrcalc upsampled_smooth_thresh_dilate.mif upsampled_smooth_thresh.mif -subtract out.mif')

  # create output image
  run.command('mrconvert out.mif ' + path.from_user(app.ARGS.output),
              mrconvert_keyval=path.from_user(app.ARGS.input, False),
              force=app.FORCE_OVERWRITE)

# Execute the script
import mrtrix3 #pylint: disable=wrong-import-position
mrtrix3.execute() #pylint: disable=no-member
