
List of MRtrix3 commands
========================


.. toctree::
   :hidden:
   :glob:

   commands/*


:ref:`5tt2gmwmi` 
  Generate a mask image appropriate for seeding streamlines on the grey matter - white matter interface

:ref:`5tt2vis` 
  generate an image for visualisation purposes from an ACT 5TT segmented anatomical image

:ref:`5ttedit` 
  manually set the partial volume fractions in an ACT five-tissue-type (5TT) image using mask images

:ref:`afdconnectivity` 
  obtain an estimate of fibre connectivity between two regions using AFD and streamlines tractography

:ref:`amp2sh` 
  convert a set of amplitudes to their spherical harmonic representation.

:ref:`connectome2tck` 
  extract streamlines from a tractogram based on their assignment to parcellated nodes

:ref:`dcmedit` 
  Edit DICOM file in-place.

:ref:`dcminfo` 
  output DICOM fields in human-readable format.

:ref:`dirflip` 
  optimise the polarity of the directions in a scheme with respect to a unipolar electrostatic repulsion model, by inversion of individual directions.

:ref:`dirgen` 
  generate a set of uniformly distributed directions using a bipolar electrostatic repulsion model.

:ref:`dirmerge` 
  splice or merge sets of directions over multiple shells into a single set, in such a way as to maintain near-optimality upon truncation.

:ref:`dirorder` 
  reorder a set of directions to ensure near-uniformity upon truncation - i.e. if the scan is terminated early, the acquired directions are still close to optimal

:ref:`dirsplit` 
  split a set of evenly distributed directions (as generated by dirgen) into approximately uniformly distributed subsets.

:ref:`dirstat` 
  report statistics on a direction set

:ref:`dwi2adc` 
  convert mean dwi (trace-weighted) images to mean adc maps

:ref:`dwi2fod` 
  estimate fibre orientation distributions from diffusion data using spherical deconvolution.

:ref:`dwi2mask` 
  Generates a whole brain mask from a DWI image. 

:ref:`dwi2noise` 
  estimate noise level voxel-wise using residuals from a truncated SH fit

:ref:`dwi2tensor` 
  Diffusion (kurtosis) tensor estimation using iteratively reweighted linear least squares estimator.

:ref:`dwidenoise` 
  Denoise DWI data and estimate the noise level based on the optimal threshold for PCA.

:ref:`dwiextract` 
  Extract either diffusion-weighted volumes or b=0 volumes from an image containing both

:ref:`dwinormalise` 
  Intensity normalise the b=0 signal within a supplied white matter mask

:ref:`fixel2sh` 
  convert a fixel-based sparse-data image into an SH image that can be visually evaluated using MRview

:ref:`fixel2tsf` 
  Map fixel values to a track scalar file based on an input tractogram. This is useful for visualising the output from fixelcfestats in 3D.

:ref:`fixel2voxel` 
  convert a fixel-based sparse-data image into some form of scalar image. This could be: 

:ref:`fixelcalc` 
  Perform basic calculations (add, subtract, multiply, divide) between two fixel images

:ref:`fixelcfestats` 
  Fixel-based analysis using connectivity-based fixel enhancement and non-parametric permutation testing.

:ref:`fixelcorrespondence` 
  Obtain angular correpondence by mapping subject fixels to a template fixel mask. 

:ref:`fixellog` 
  compute the natural logarithm of all values in a fixel image

:ref:`fixelreorient` 
  Reorient fixel directions using the local affine transformation (Jacobian matrix) of an input warp.

:ref:`fixelstats` 
  Compute fixel image statistics

:ref:`fixelthreshold` 
  Threshold the values in a fixel image

:ref:`fod2dec` 
  Generate FOD-based DEC maps, with optional panchromatic sharpening and/or luminance/perception correction.

:ref:`fod2fixel` 
  use a fast-marching level-set method to segment fibre orientation distributions, and save parameters of interest as fixel images

:ref:`label2colour` 
  convert a parcellated image (where values are node indices) into a colour image 

:ref:`label2mesh` 
  generate meshes from a label image.

:ref:`labelconvert` 
  Convert a connectome node image from one lookup table to another. 

:ref:`maskfilter` 
  Perform filtering operations on 3D / 4D mask images.

:ref:`mesh2pve` 
  convert a mesh surface to a partial volume estimation image.

:ref:`meshconvert` 
  convert meshes between different formats, and apply transformations.

:ref:`meshfilter` 
  apply filter operations to meshes.

:ref:`mraverageheader` 
  This command calculates the average (unbiased) coordinate space of all input images

:ref:`mrcalc` 
  apply generic voxel-wise mathematical operations to images.

:ref:`mrcat` 
  concatenate several images into one

:ref:`mrcheckerboardmask` 
  create bitwise checkerboard image

:ref:`mrclusterstats` 
  Voxel-based analysis using permutation testing and threshold-free cluster enhancement.

:ref:`mrconvert` 
  perform conversion between different file types and optionally extract a subset of the input image.

:ref:`mrcrop` 
  Crop an image series to a reduced field of view, using either manual setting of axis dimensions, or a computed mask image corresponding to the brain. 

:ref:`mrfilter` 
  Perform filtering operations on 3D / 4D MR images. For 4D images, each 3D volume is processed independently.

:ref:`mrinfo` 
  display header information, or extract specific information from the header.

:ref:`mrmath` 
  compute summary statistic on image intensities either across images, or along a specified axis for a single image. Supported operations are:

:ref:`mrmesh` 
  Generate a mesh file from an image.

:ref:`mrmetric` 
  computes a dissimilarity metric between two images. Currently only the mean squared difference is implemented

:ref:`mrpad` 
  Pad an image to increase the FOV

:ref:`mrregister` 
  Register two images together using a rigid, affine or a non-linear transformation model.

:ref:`mrresize` 
  Resize an image by defining the new image resolution, voxel size or a scale factor.

:ref:`mrstats` 
  compute images statistics.

:ref:`mrthreshold` 
  create bitwise image by thresholding image intensity.

:ref:`mrtransform` 
  apply spatial transformations to an image. 

:ref:`mrview` 
  The MRtrix image viewer.

:ref:`peaks2amp` 
  convert peak directions image to amplitudes.

:ref:`sh2amp` 
  Evaluate the amplitude of an image of spherical harmonic functions along the specified directions

:ref:`sh2peaks` 
  extract the peaks of a spherical harmonic function at each voxel, by commencing a Newton search along a set of specified directions

:ref:`sh2power` 
  compute the total power of a spherical harmonics image.

:ref:`sh2response` 
  generate an appropriate response function from the image data for spherical deconvolution

:ref:`shbasis` 
  examine the values in spherical harmonic images to estimate (and optionally change) the SH basis used.

:ref:`shconv` 
  perform a spherical convolution

:ref:`shview` 
  view spherical harmonics surface plots.

:ref:`tck2connectome` 
  generate a connectome matrix from a streamlines file and a node parcellation image

:ref:`tckconvert` 
  Convert between different track file formats.

:ref:`tckedit` 
  perform various editing operations on track files.

:ref:`tckgen` 
  perform streamlines tractography.

:ref:`tckglobal` 
  Multi-Shell Multi-Tissue Global Tractography.

:ref:`tckinfo` 
  print out information about track file

:ref:`tckmap` 
  Use track data as a form of contrast for producing a high-resolution image.

:ref:`tcknormalise` 
  apply a normalisation map to a tracks file.

:ref:`tckresample` 
  Resample each streamline to a new set of vertices. 

:ref:`tcksample` 
  sample values of an associated image along tracks

:ref:`tcksift2` 
  successor to the SIFT method; instead of removing streamlines, use an EM framework to find an appropriate cross-section multiplier for each streamline

:ref:`tcksift` 
  filter a whole-brain fibre-tracking data set such that the streamline densities match the FOD lobe integrals.

:ref:`tckstats` 
  calculate statistics on streamlines length.

:ref:`tensor2metric` 
  Generate maps of tensor-derived parameters.

:ref:`transformcalc` 
  This command's function is to process linear transformation matrices.

:ref:`transformconvert` 
  This command's function is to convert linear transformation matrices.

:ref:`tsfdivide` 
  an application to divide corresponding values in track scalar files

:ref:`tsfinfo` 
  print out information about track scalar file

:ref:`tsfmult` 
  an application to multiply corresponding values in track scalar files

:ref:`tsfsmooth` 
  Gaussian filter a track scalar file

:ref:`tsfthreshold` 
  an application to threshold and invert track scalar files

:ref:`voxel2fixel` 
  map the scalar value in each voxel to all fixels within that voxel. This could be used to enable CFE-based statistical analysis to be performed on voxel-wise measures

:ref:`warp2metric` 
  compute fixel or voxel-wise metrics from a 4D deformation field

:ref:`warpconvert` 
  convert between different representations of a non-linear warp.

:ref:`warpcorrect` 
  replaces voxels in a deformation field that point to 0,0,0 with nan,nan,nan. 

:ref:`warpinit` 
  create an initial warp image, representing an identity transformation. 

