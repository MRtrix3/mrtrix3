#!/bin/bash
# Verify read-write functionality of the PNG format

# Two basic tests are first performed:
# - A grayscale image
# - An RGB image
rm -f tmp-*.png

mrconvert mrconvert/in.mif tmp-gray[].png
mrcalc mrconvert/in.mif 0 -max - | \
    mrtransform - -replace identity.txt tmp-gray.mif -force
testing_diff_image tmp-gray[].png tmp-gray.mif

mrconvert unit_warp.mif tmp-rgb[].png -datatype uint8
mrcalc unit_warp.mif 0 -max -round - | \
    mrtransform - -replace identity.txt - | \
    mrconvert - -vox 1,1,1 tmp-rgb.mif -force
testing_diff_image tmp-rgb[].png tmp-rgb.mif

# Now some more advanced tests:

# Ensure that despite the loss of a lot of header information relating to spatial encoding
#   due to writing to non-3D PNG images,
#   we can nevertheless recover the original image provided we can re-introduce that information
mrinfo template.mif.gz -transform > tmp.txt
mrconvert template.mif.gz tmp[].png -force
mrconvert tmp[].png -vox 2.5 - |
    mrtransform - -replace tmp.txt - |
    mrcalc - 255 -div - |
    testing_diff_image - $(mrcalc template.mif.gz 1.0 -min -) -abs 0.002

# For each of the three slice directions,
#   generate PNG images for a subset of slices:
# - Ensure that these PNGs correspond to pre-generated data,
#   which can be inspected manually to prove that they possess the correct orientation
# - Ensure that these files can then correspondingly be read into a 3D image,
#   and the spatial encoding is consistent with pre-generated data,
#   which can also be inspected manually to prove that they possess the correct orientation
rm -f tmpaxial*.png
mrconvert template.mif.gz -coord 2 9,19,29,39,49 tmpaxial[].png
testing_diff_image tmpaxial[].png mrconvert/pngaxial[].png
mrconvert mrconvert/pngaxial[].png - |
    testing_diff_image - mrconvert/pngaxial.mif.gz

rm -f tmpcoronal*.png
mrconvert template.mif.gz -coord 1 17,32,47,62,77 -axes 0,2,1 tmpcoronal[].png
testing_diff_image tmpcoronal[].png mrconvert/pngcoronal[].png
mrconvert mrconvert/pngcoronal[].png - |
    testing_diff_image - $(mrconvert mrconvert/pngcoronal.mif.gz -axes 0,2,1 -)

rm -f tmpsagittal*.png
mrconvert template.mif.gz -coord 0 27,47,67 -axes 1,2,0 tmpsagittal[].png
testing_diff_image tmpsagittal[].png mrconvert/pngsagittal[].png
mrconvert mrconvert/pngsagittal[].png - |
    testing_diff_image - $(mrconvert mrconvert/pngsagittal.mif.gz -axes 1,2,0 -)

# Ensure that a bitwise image can be written and read correctly
rm -f tmpmask*.png
mrconvert mask.mif tmpmask[].png
testing_diff_image tmpmask[].png mrconvert/pngmask[].png
mrconvert mrconvert/pngmask[].png - |
    testing_diff_image - mrconvert/pngmask.mif.gz

# Read a 4D image with 3 volumes,
#   assuming that these volumes encode RGB components,
#   and write these as a 3-channel RGB image.
# Also ensure that such data can be read,
#   and conform to what their contents are expected to be
#   given the source image and the loss of spatial encoding information
rm -f tmptissues*.png
mrconvert dwi2fod/msmt/tissues.mif tmprgb[].png
testing_diff_image tmprgb[].png mrconvert/pngrgb[].png
mrconvert mrconvert/pngrgb[].png - |
    testing_diff_image - $(mrconvert dwi2fod/msmt/tissues.mif -vox 1,1,1 - |
        mrtransform - -replace identity.txt - |
        mrcalc - 255 -mult -round 255 -min -)
